name: Terraform Plan
description: Validate and Plan terraform configurations

inputs:
  github_token:
    description: GitHub token used to create comment in PR
    required: false
    default: ${{ github.token }}
  working_directory:
    description: The directory where the terraform files are located
    required: false
  terraform_cloud_hostname:
    description: The hostname of a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file
    required: false
    default: app.terraform.io
  terraform_cloud_token:
    description: The API token for a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file
    required: false
  terraform_version:
    description: The version of Terraform CLI to install. Instead of full version string you can also specify constraint string starting with "<" (for example `<1.13.0`) to install the latest version satisfying the constraint. A value of `latest` will install the latest version of Terraform CLI
    required: false
    default: latest
  init_flags:
    description: Extra flags for Terraform Init
    required: false
  skip_init:
    description: Toggle to skip init step
    required: false
    default: "false"
  plan_flags:
    description: Extra flags for Terraform Plan
    required: false
outputs:
  init_stdout:
    description: Terraform init output
    value: ${{ steps.init.outputs.stdout }}
  validate_stdout:
    description: Terraform validate output
    value: ${{ steps.validate.outputs.stdout }}
  plan_stdout:
    description: Terraform plan output
    value: ${{ steps.plan.outputs.stdout }}
  cache_path:
    description: Path to restore tfplan file
    value: ${{ inputs.working_directory }}/tfplan
  cache_key:
    description: Key to restore tfplan file
    value: ${{ github.workflow }}-${{ github.run_id }}

runs:
  using: composite

  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_hostname: ${{ inputs.terraform_cloud_hostname }}
        cli_config_credentials_token: ${{ inputs.terraform_cloud_token }}
        terraform_version: ${{ inputs.terraform_version }}

    - name: Check format
      id: format
      shell: bash
      run: terraform fmt -recursive -check

    - name: Init
      id: init
      if: inputs.skip_init != 'true'
      working-directory: ${{ inputs.working_directory }}
      env:
        TF_IN_AUTOMATION: "1"
        TF_INPUT: "0"
      shell: bash
      run: |
        echo ::group::Init
        terraform init ${{ inputs.init_flags }}
        echo ::endgroup::

    - name: Validate
      id: validate
      working-directory: ${{ inputs.working_directory }}
      env:
        TF_IN_AUTOMATION: "1"
      shell: bash
      run: |
        echo ::group::Validate
        terraform validate
        echo ::endgroup::

    - name: Plan
      id: plan
      working-directory: ${{ inputs.working_directory }}
      env:
        TF_IN_AUTOMATION: "1"
        TF_INPUT: "0"
      shell: bash
      run: |
        echo ::group::Plan
        terraform plan -out=tfplan ${{ inputs.plan_flags }}
        echo ::endgroup::

    - name: Cache Plan file
      uses: actions/cache/save@v4
      with:
        path: ${{ inputs.working_directory }}/tfplan
        key: ${{ github.workflow }}-${{ github.run_id }}

    - name: Comment in PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const pattern = new RegExp([
            `[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)`,
            `(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))`
          ].join(`|`), `g`)
          
          const plan = `${{ steps.plan.outputs.stdout }}`.replace(pattern, ``)
          
          const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
            attempt_number: process.env.GITHUB_RUN_ATTEMPT
          })

          const output = `#### Format 🖌\`${{ steps.format.outcome }}\`
          #### Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Validation 🤖\`${{ steps.validate.outcome }}\`
          #### Plan 📖\`${{ steps.plan.outcome }}\`
          
          ${(`${{ steps.plan.outcome }}` === `success`) ? `<details><summary>Show Plan</summary>

          \`\`\`
          ${plan}
          \`\`\`
          
          </details>` : `` }
          
          **Pusher**: *@${context.actor}* &nbsp; **Commit**: *\`${context.payload.pull_request.head.sha.substring(0, 7)}\`* &nbsp; **Workflow run**: *[${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}/attempts/${process.env.GITHUB_RUN_ATTEMPT})* &nbsp; **Workflow job**: *[${context.job}](${jobs.jobs.filter(job => job.name == context.job)[0].html_url})*`
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
